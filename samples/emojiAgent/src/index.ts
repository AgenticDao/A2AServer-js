/**
 * Emoji Generation Agent implemented with LangChain and OpenAI
 */
import {
  TaskContext,
  A2AServer,
  TaskYieldUpdate,
} from "@agenticdao/crypto-a2a-server";
import * as schema from "@agenticdao/crypto-a2a-server/dist/schema";
import config from "./config";
import { emojiGenerationAgent } from "./agent";
import { AIMessage, BaseMessage, isAIMessage } from "@langchain/core/messages";

/**
 * Emoji Generation Agent implementation using LangChain and OpenAI
 */
async function* emojiGenerationAgentHandler({
  task,
  userMessage,
  history,
}: TaskContext): AsyncGenerator<TaskYieldUpdate, schema.Task | void, unknown> {
  // Make sure we have a user message
  if (!userMessage || !userMessage.parts.length) {
    console.warn(`[EmojiGenerationAgent] No user message found for task ${task.id}`);
    yield {
      state: "failed",
      message: {
        role: "agent",
        parts: [{ type: "text", text: "No input message found." }],
      },
    };
    return;
  }

  // Get the user's query from the message
  const userQuery = userMessage.parts.find((part: schema.Part) => part.type === 'text')?.text || '';
  
  if (!userQuery.trim()) {
    yield {
      state: "input-required",
      message: {
        role: "agent",
        parts: [{ type: "text", text: "Please describe the emoji you want to generate. For example: 'Generate a happy cat with sunglasses' or 'Create an emoji of a dancing robot'" }],
      },
    };
    return;
  }

  // Provide initial status update
  yield {
    state: "working",
    message: {
      role: "agent",
      parts: [{ type: "text", text: "Generating your custom emoji..." }],
    },
  };

  try {
    // Run the emoji generation agent graph with the user's query
    const result = await emojiGenerationAgent.invoke(userQuery);
    
    // Get the last assistant message
    const assistantMessage = result.messages
      .filter((msg: BaseMessage) => isAIMessage(msg))
      .pop() as AIMessage;
    
    if (!assistantMessage) {
      throw new Error("No response generated by the agent");
    }
    
    // Process AIMessage content, which might be string or complex content type
    let messageContent = "";
    if (typeof assistantMessage.content === 'string') {
      messageContent = assistantMessage.content;
    } else if (Array.isArray(assistantMessage.content)) {
      // Process complex content type, extract text portions
      messageContent = assistantMessage.content
        .map(item => {
          if (typeof item === 'string') return item;
          if (item.type === 'text') return item.text;
          return '';
        })
        .join('');
    }
    
    // Prepare the message parts
    const messageParts: schema.Part[] = [];
    
    // Add emoji data as a data part if available
    if (result.emoji_data) {
      if (result.emoji_data.error) {
        // If there's an error, add the error information
        messageParts.push({
          type: "text",
          text: `\n\nError: ${result.emoji_data.error}\n${result.emoji_data.details || ''}`
        });
        
        // Return input-required state
        yield {
          state: "input-required",
          message: {
            role: "agent",
            parts: messageParts,
          },
        };
        return;
      } else if (result.emoji_data.success) {        
        // Add the generated emoji image
        if (result.emoji_data.imageUrl) {
          messageParts.push({
            type: "file",
            file: {
              name: `${result.emoji_data.prompt}.png`,
              uri: result.emoji_data.imageUrl,
              mimeType: "image/png"
            }
          });
        }
        
        // Add download link if available
        if (result.emoji_data.downloadUrl) {
          messageParts.push({
            type: "text",
            text: `\n\nðŸ”— [Download your emoji](${result.emoji_data.downloadUrl})`
          });
        }
      }
    }

    messageParts.push({
      type: "text",
      text: messageContent,
    });

    for (let i = 0; i < messageParts.length; i++) {
      yield {
        index: i,
        name: `emoji generation ${i}`,
        parts: [messageParts[i]],
        lastChunk: i === messageParts.length - 1,
      };
    }
    
    // Check if the message content indicates more input is needed
    const needsMoreInput = messageContent.includes("need more information") || 
                         messageContent.includes("please provide") || 
                         messageContent.includes("missing") ||
                         messageContent.includes("specify") ||
                         messageContent.includes("unclear");
    
    // Return the final response
    yield {
      state: needsMoreInput ? "input-required" : "completed",
      message: {
        role: "agent",
        parts: messageParts,
      },
    };
  } catch (error) {
    // Handle errors
    console.error("[EmojiGenerationAgent] Error processing request:", error);
    yield {
      state: "failed",
      message: {
        role: "agent",
        parts: [
          {
            type: "text", 
            text: `Error processing your request: ${error instanceof Error ? error.message : String(error)}`
          }
        ],
      },
    };
  }
}

// Agent card definition
const emojiGenerationAgentCard: schema.AgentCard = {
  name: "Emoji Generation Agent",
  description: "Generates custom emoji images based on your descriptions",
  url: config.server.endpoint,
  provider: {
    organization: "A2A Samples",
  },
  version: "0.1.0",
  capabilities: {
    streaming: true,
    pushNotifications: false,
    stateTransitionHistory: true,
  },
  authentication: null,
  defaultInputModes: ["text", "text/plain"],
  defaultOutputModes: ["file", "image"],
  skills: [
    {
      id: "generate_custom_emoji",
      name: "Custom Emoji Generation Tool",
      description:
        "Generates custom emoji images based on user descriptions using AI image generation technology",
      tags: ["emoji", "image generation", "custom emoji", "ai art", "creative"],
      examples: [
        "Generate a happy cat with sunglasses", 
        "Create an emoji of a dancing robot",
        "Make a sleepy panda emoji",
        "Generate a rocket ship emoji with stars"
      ],
    },
  ],
};

// Create and start the server
const server = new A2AServer(emojiGenerationAgentHandler, {
  card: emojiGenerationAgentCard,
  enableVerification: true,
});

// Start the server on the configured port
server.start(config.server.port);

console.log(`[Emoji Generation Agent] Server started on http://${config.server.host}:${config.server.port}, and endpoint is: ${config.server.endpoint}`);
console.log("[Emoji Generation Agent] Press Ctrl+C to stop the server");