/**
 * Currency Agent implemented with LangChain and OpenAI
 */
import {
  TaskContext,
  A2AServer,
  TaskYieldUpdate,
  schema
} from "@agenticdao/a2a-server";
import config from "./config";
import { currencyAgent } from "./agent";
import { AIMessage, BaseMessage, isAIMessage } from "@langchain/core/messages";

/**
 * Currency Agent implementation using LangChain and OpenAI
 */
async function* currencyAgentHandler({
  task,
  userMessage,
  history,
}: TaskContext): AsyncGenerator<TaskYieldUpdate, schema.Task | void, unknown> {
  // Make sure we have a user message
  if (!userMessage || !userMessage.parts.length) {
    console.warn(`[CurrencyAgent] No user message found for task ${task.id}`);
    yield {
      state: "failed",
      message: {
        role: "agent",
        parts: [{ type: "text", text: "No input message found." }],
      },
    };
    return;
  }

  // Get the user's query from the message
  const userQuery = userMessage.parts.find(part => part.type === 'text')?.text || '';
  
  if (!userQuery.trim()) {
    yield {
      state: "input-required",
      message: {
        role: "agent",
        parts: [{ type: "text", text: "Please provide a currency exchange query. For example: 'What is the exchange rate between USD and EUR?'" }],
      },
    };
    return;
  }

  // Provide initial status update
  yield {
    state: "working",
    message: {
      role: "agent",
      parts: [{ type: "text", text: "Looking up exchange rates..." }],
    },
  };

  try {
    // Run the currency agent graph with the user's query
    const result = await currencyAgent.invoke(userQuery);
    
    // Get the last assistant message
    const assistantMessage = result.messages
      .filter((msg: BaseMessage) => isAIMessage(msg))
      .pop() as AIMessage;
    
    if (!assistantMessage) {
      throw new Error("No response generated by the agent");
    }
    
    // Process AIMessage content, which might be string or complex content type
    let messageContent = "";
    if (typeof assistantMessage.content === 'string') {
      messageContent = assistantMessage.content;
    } else if (Array.isArray(assistantMessage.content)) {
      // Process complex content type, extract text portions
      messageContent = assistantMessage.content
        .map(item => {
          if (typeof item === 'string') return item;
          if (item.type === 'text') return item.text;
          return '';
        })
        .join('');
    }
    
    // Prepare the message parts
    const messageParts: schema.Part[] = [
      {
        type: "text",
        text: messageContent,
      }
    ];
    
    // Add exchange data as a data part if available
    if (result.exchange_data) {
      if (result.exchange_data.error) {
        // If there's an error, add the error information
        messageParts.push({
          type: "text",
          text: `\n\nError: ${result.exchange_data.error}\n${result.exchange_data.details || ''}`
        });
        
        // Return input-required state
        yield {
          state: "input-required",
          message: {
            role: "agent",
            parts: messageParts,
          },
        };
        return;
      } else if (result.exchange_data.success) {
        // Add successful exchange rate data
        messageParts.push({
          type: "data",
          data: result.exchange_data
        });
        
        // If there's formatted info, add a friendlier display
        if (result.exchange_data.formatted && result.exchange_data.formatted.message) {
          messageParts.push({
            type: "text",
            text: `\n\n${result.exchange_data.formatted.message}`
          });
        }
      }
    }
    
    // Check if the message content indicates more input is needed
    const needsMoreInput = messageContent.includes("need more information") || 
                         messageContent.includes("please provide") || 
                         messageContent.includes("missing");
    
    // Return the final response
    yield {
      state: needsMoreInput ? "input-required" : "completed",
      message: {
        role: "agent",
        parts: messageParts,
      },
    };
  } catch (error) {
    // Handle errors
    console.error("[CurrencyAgent] Error processing request:", error);
    yield {
      state: "failed",
      message: {
        role: "agent",
        parts: [
          {
            type: "text", 
            text: `Error processing your request: ${error instanceof Error ? error.message : String(error)}`
          }
        ],
      },
    };
  }
}

// Agent card definition
const currencyAgentCard: schema.AgentCard = {
  name: "Currency Agent",
  description: "Helps with exchange rates for currencies",
  url: `http://${config.server.host}:${config.server.port}`,
  provider: {
    organization: "A2A Samples",
  },
  version: "0.1.0",
  capabilities: {
    streaming: true,
    pushNotifications: false,
    stateTransitionHistory: true,
  },
  authentication: null,
  defaultInputModes: ["text"],
  defaultOutputModes: ["text"],
  skills: [
    {
      id: "convert_currency",
      name: "Currency Exchange Rates Tool",
      description:
        "Helps with exchange values between various currencies",
      tags: ["currency conversion", "currency exchange", "forex"],
      examples: [
        "What is the exchange rate between USD and EUR?", 
        "How much is 1 Euro in Japanese Yen?",
        "Check yesterday's GBP to CNY exchange rate",
        "Convert USD to CNY"
      ],
    },
  ],
};

// Create and start the server
const server = new A2AServer(currencyAgentHandler, {
  card: currencyAgentCard,
  enableVerification: true,
});

// Start the server on the configured port
server.start(config.server.port);

console.log(`[Currency Agent] Server started on http://${config.server.host}:${config.server.port}`);
console.log("[Currency Agent] Press Ctrl+C to stop the server");